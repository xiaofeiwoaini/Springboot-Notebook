# 定义两个全局数据源
spring.shardingsphere.datasource.names=a-ds-0,a-ds-1

# 默认数据源，未分片的表默认执行库([javax.sql.DataSource]: Factory method 'dataSource')
spring.shardingsphere.sharding.default-data-source-name=a-ds-0

# 配置数据源 a-ds-0
spring.shardingsphere.datasource.a-ds-0.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.a-ds-0.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.a-ds-0.url=jdbc:mysql://192.168.3.30/a-ds-0?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.a-ds-0.username=root
spring.shardingsphere.datasource.a-ds-0.password=123456
# 配置数据源 a-ds-1
spring.shardingsphere.datasource.a-ds-1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.a-ds-1.driverClassName=com.mysql.jdbc.Driver
spring.shardingsphere.datasource.a-ds-1.url=jdbc:mysql://192.168.3.30/a-ds-1?useUnicode=true&characterEncoding=utf8&tinyInt1isBit=false&useSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.a-ds-1.username=root
spring.shardingsphere.datasource.a-ds-1.password=123456
# 配置分片表 t_order
# 指定真实数据节点
spring.shardingsphere.sharding.tables.t_order.actual-data-nodes=a-ds-$->{0..1}.t_order_$->{0..2}
### 分库策略
# 分库分片健
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.sharding-column=order_id
# 分库分片算法
#spring.shardingsphere.sharding.tables.t_order.database-strategy.inline.algorithm-expression=a-ds-$->{order_id % 2}
#spring.shardingsphere.sharding.tables.t_order.database-strategy.hint.algorithm-class-name=com.xiaofu.sharding.algorithm.dbAlgorithm.MyDBHintShardingAlgorithm
# 分库分片健
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.sharding-column=order_id
# 分库分片算法(自定义算法)
spring.shardingsphere.sharding.tables.t_order.database-strategy.standard.precise-algorithm-class-name=com.xiaofu.sharding.algorithm.dbAlgorithm.MyDBPreciseShardingAlgorithm

# 分表策略
# 分表分片健
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.sharding-column=order_id
# 分表算法
#spring.shardingsphere.sharding.tables.t_order.table-strategy.inline.algorithm-expression=t_order_$->{order_id % 3}
# 分表分片健
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.sharding-column=order_id
# 分表算法
spring.shardingsphere.sharding.tables.t_order.table-strategy.standard.precise-algorithm-class-name=com.xiaofu.sharding.algorithm.tableAlgorithm.MyTablePreciseShardingAlgorithm


# 自增主键字段
spring.shardingsphere.sharding.tables.t_order.key-generator.column=order_id
# 自增主键ID 生成方案
spring.shardingsphere.sharding.tables.t_order.key-generator.type=SNOWFLAKE

# 配置分片表 t_order_item
spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=a-ds-$->{0..1}.t_order_item_$->{0..2}
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=item_id
spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=a-ds-$->{item_id % 2}
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=item_id
spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{item_id % 3}
spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=item_id
spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE

# 分表分片健
#spring.shardingsphere.sharding.tables.t_order.table-strategy.complex.sharding-column=order_id,user_id
# 分表算法
#spring.shardingsphere.sharding.tables.t_order.table-strategy.hint.algorithm-class-name=com.xiaofu.sharding.algorithm.tableAlgorithm.MyTableHintShardingAlgorithm
# 工作机器唯一 id
#spring.shardingsphere.sharding.tables.t_order.key-generator.worker.id=6
# 配置分片表 t_order_item
#spring.shardingsphere.sharding.tables.t_order_item.actual-data-nodes=ds-$->{0..1}.t_order_item_$->{0..2}
#spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.database-strategy.inline.algorithm-expression=ds-$->{order_id % 2}
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.sharding-column=order_id
#spring.shardingsphere.sharding.tables.t_order_item.table-strategy.inline.algorithm-expression=t_order_item_$->{order_id % 3}
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.column=item_id
#spring.shardingsphere.sharding.tables.t_order_item.key-generator.type=SNOWFLAKE
# 绑定表关系
#spring.shardingsphere.sharding.binding-tables=t_order , t_order_item
# 配置广播表
spring.shardingsphere.sharding.broadcast-tables=t_config
# 是否开启 SQL解析日志
spring.shardingsphere.props.sql.show=true
mybatis-plus.mapper-locations=classpath:mapping/*.xml
mybatis-plus.map-underscore-to-camel-case=true
# 开启热部署（更改文件后，自动重启）
spring.devtools.restart.enabled=true

